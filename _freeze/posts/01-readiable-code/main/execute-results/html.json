{
  "hash": "36d2fd094adfe45674413b124537c8da",
  "result": {
    "markdown": "---\ntitle: \"The Art of Readiable R code\"\nauthor: \"Angel Feliz\"\neditor: source\nformat: \n  html:\n    fig-width: 12\n    fig-height: 8\n    fig-align: \"center\"\n    toc: true\n    toc-title: Index\n    toc-location: left\n    self-contained: true\n    number-sections: true\n    smooth-scroll: true\nimage: \"readable-code-book.jpg\"\ncategories: [Learning Journey]\n---\n\n\n<style>\n\ncode{color: #0c5bd1;}\n\n.center {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  width: 50%;\n}\n\n</style>\n\n# Introduction {.unnumbered}\n\nWhen we start our journey as a programmers it's normal to get exited by the new positives. We get the capacity to do many things that otherwise would be impossible, making projects faster and assuring consistency.\n\nBut the problems start when you need to modify a script that you wrote 6 in the past. That's when you found out that you don't remember why you were applying some specific filters or calculating a value in a odd way.\n\nAs a Reporting Analyst and I am always creating and changing scripts and after applying the tips provided in the book I could reduce the time needed to apply changes from 5 to 2 days (60% faster).\n\n<img src=\"readable-code-book.jpg\" alt=\"Source: https://www.amazon.com/Art-Readable-Code-Practical-Techniques/dp/0596802293\" class=\"center\">\n\n\n# How do you know if your code is readable?\n\nIn order a code to be readable needs to:\n\n1. Have explicit names for variables, functions and function arguments.\n\n2. Have commentaries that explain the reasons behind the code. At the end, the reader should know as much as the writer did.\n\n3. Be understood without reading it twice.\n\n\n# Practical Tecniques\n\nOnce we know what we want to achieve it results really useful to know some techniques that might help us for that purpose. In this article, we will use `R` to make all the our examples and the `datasets::mtcars` data.frame as it is widely use for simple examples.\n\n## Naming variables\n\nDefining good variables names in general is more important than writing a good comment and should try to give as much context as possible in variable name. Some tips to follow are:\n\n1. Variable should be named base on its value. \n    - Words like *is*, *has* and *should* make clearer a Boolean variables by avoiding negations.\n    - Looping index can be identify by using a suffix, for example: club_i or table_i rather just i\n\n2. If the variable has a measurement we can use suffixes to make it explicit.\n  \n3. A variable should remain the same value across the project. \n    - If a variable is changed in many stages the variable name should show the current stage.\n    - If you need to create many temporal intermediate variables to get a final resulta it's better to write a function.\n\nIf we run `?mtcars` in the `R` console we can see a description of each variable in the `mtcars` dataset. After reading each column description it is easy to understand each column name, but it is almost impossible to understand what each variable contains by just reading each column name. Let's see two examples:\n\n- **mpg**: In this case, *m* means *miles*, *p* means *per* and *g* means *gallons*. It isn't explicit, *m* could mean meters or any other thing. It could be obvious for some with car a basic knowledge, but for many people the meaning of variable could be confusing. To fix this problems let's write word completely.\n\n- **cyl**: It stands for first 3 letters of cylinder, but no all readers will understand that, so it is better to write the complete word and add the unit used.\n\nOnce understand the point, we can create a new `data.frame` applying tips mencined.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMtCarsNewNames <-\n  c(\"mpg\" = \"miles_per_gallon\",\n    \"cyl\"= \"cylinders_count\",\n    \"disp\" = \"displacement_in3\",\n    \"hp\" = \"power_hp\",\n    \"drat\" = \"rear_axle_ratio\",\n    \"wt\" = \"weight_klb\",\n    \"qsec\" = \"quarter_mile_secs\",\n    \"vs\" = \"engine_is_straight\",\n    \"am\" = \"transmission_is_manual\",\n    \"gear\" = \"gear_count\",\n    \"carb\" = \"carburetor_count\")\n\nMtCarsRenamed <- mtcars\nnames(MtCarsRenamed) <- MtCarsNewNames[names(mtcars)]\n\nhead(MtCarsRenamed)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  miles_per_gallon cylinders_count displacement_in3 power_hp\nMazda RX4                     21.0               6              160      110\nMazda RX4 Wag                 21.0               6              160      110\nDatsun 710                    22.8               4              108       93\nHornet 4 Drive                21.4               6              258      110\nHornet Sportabout             18.7               8              360      175\nValiant                       18.1               6              225      105\n                  rear_axle_ratio weight_klb quarter_mile_secs\nMazda RX4                    3.90      2.620             16.46\nMazda RX4 Wag                3.90      2.875             17.02\nDatsun 710                   3.85      2.320             18.61\nHornet 4 Drive               3.08      3.215             19.44\nHornet Sportabout            3.15      3.440             17.02\nValiant                      2.76      3.460             20.22\n                  engine_is_straight transmission_is_manual gear_count\nMazda RX4                          0                      1          4\nMazda RX4 Wag                      0                      1          4\nDatsun 710                         1                      1          4\nHornet 4 Drive                     1                      0          3\nHornet Sportabout                  0                      0          3\nValiant                            1                      0          3\n                  carburetor_count\nMazda RX4                        4\nMazda RX4 Wag                    4\nDatsun 710                       1\nHornet 4 Drive                   1\nHornet Sportabout                2\nValiant                          1\n```\n:::\n:::\n\n\nAs we changed the original data it is important to save a new variable specify how data change. In this case we just added the word **renamed** so `mtcars` will keep the same value across the project.\n\nTo write good variable names might take some iteration and you might need to play devil's advocate in under to find out a better name than the initial one.\n\n## Naming functions and its arguments\n\nCreating explicit functions names makes much easier to understand any code. I could make a really complex process to become a very simple one. Some tips to follow are:\n\n1. Start the function with a explicit verb to avoid misunderstandings. Below we can see some recommendations from the book.\n\n| Word | Alternatives |\n|:----:|------------:|\n| send | deliver, dispatch, announce, distribute, route |\n| find | search, extract, locate, recover |\n| start | launch, create, begin, open |\n| make | create, set up, build, generate, compose, add, new |\n\n\n2. Avoid using abstract names that don't desecrate the output.\n\n3. Some general recommendations for function arguments are:\n\n| Word | Use|\n|:-----|:---|\n|min and max | Useful to denominate include limits|\n|first and last| Useful to denominate exclusive limits|\n|begin and end| Useful to denominate ether inconclusive or exclusive limits|\n\nFor example, we want to create a function that filters the value over the median of any variable, we named a for example `filter_median`, but that could bring some confusion, some could understand that you will keep or remove all values equals to the median. A better name can be `keep_over_median`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkeep_over_median <- function(DF, variable){\n  \n  if(!is.numeric(DF[[variable]])){\n    stop(paste0(variable,\" must be numeric\"))\n  }\n  \n  DF[DF[[variable]] > median(DF[[variable]], na.rm = TRUE), ]\n}\n\n\nkeep_over_median(MtCarsRenamed, variable = \"miles_per_gallon\") |>\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkeep_median_bigger <- function(DF, variable){\n  \n  if(!is.numeric(DF[[variable]])){\n    stop(paste0(variable,\" must be numeric\"))\n  }\n  \n  DF[DF[[variable]] >= median(DF[[variable]], na.rm = TRUE), ]\n}\n\n\nkeep_median_bigger(MtCarsRenamed, variable = \"miles_per_gallon\") |>\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17\n```\n:::\n:::\n",
    "supporting": [
      "main_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}