{
  "hash": "40fcf7e06d9c3372c74f8aa43d0af478",
  "result": {
    "markdown": "---\ntitle: \"The Art of Readiable R code\"\nauthor: \"Angel Feliz\"\neditor: source\nformat: \n  html:\n    fig-width: 12\n    fig-height: 8\n    fig-align: \"center\"\n    toc: true\n    toc-title: Index\n    toc-location: left\n    self-contained: true\n    number-sections: true\n    smooth-scroll: true\nimage: \"readable-code-book.jpg\"\ncategories: [Learning Journey]\n---\n\n\n<style>\n\ncode{color: #0c5bd1;}\n\n.center {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  width: 50%;\n}\n\n</style>\n\n# Introduction {.unnumbered}\n\nWhen we start our journey as a programmers it's normal to get exited by the new positives. We get the capacity to do many things that otherwise would be impossible, making projects faster and assuring consistency.\n\nBut the problems start when you need to modify a script that you wrote 6 in the past. That's when you found out that you don't remember why you were applying some specific filters or calculating a value in a odd way.\n\nAs a Reporting Analyst and I am always creating and changing scripts and after applying the tips provided in the book I could reduce the time needed to apply changes from 5 to 2 days (60% faster).\n\n<img src=\"readable-code-book.jpg\" alt=\"Source: https://www.amazon.com/Art-Readable-Code-Practical-Techniques/dp/0596802293\" class=\"center\">\n\n\n# How do you know if your code is readable?\n\nIn order a code to be readable needs to:\n\n1. Have explicit names for variables, functions and function arguments.\n\n2. Have commentaries that explain the reasons behind the code. At the end, the reader should know as much as the writer did.\n\n3. Be understood without reading it twice.\n\n\n# Practical Tecniques\n\nOnce we know what we want to achieve it results really useful to know some techniques that might help us for that purpose. In this article, we will use `R` to make all the our examples and the `datasets::mtcars` data.frame as it is widely use for simple examples.\n\n\n## Naming variables\n\n- Variables should be named base on its value.\n- Words like *is*, *has* and *should* are make clearer a Boolean variables.\n- If the variable has a measurement we can use suffixes to make it explicit.\n- If a variable is changed in many stages the variable name should show the current stage.\n- A variable should remain the same value across the project.\n  \nFor example, if we run `?mtcars` in the `R` console we can see a description of each variable in the `mtcars` dataset:\n\n- **mpg**:\tMiles/(US) gallon\n-\t**cyl**:\tNumber of cylinders\n-\t**disp**:\tDisplacement (cu.in.)\n-\t**hp**:\tGross horsepower\n-\t**drat**:\tRear axle ratio\n- **wt**:\tWeight (1000 lbs)\n-\t**qsec**:\t1/4 mile time\n-\t**vs**:\tEngine (0 = V-shaped, 1 = straight)\n- **am**:\tTransmission (0 = automatic, 1 = manual)\n-\t**gear**:\tNumber of forward gears\n- **carb**:\tNumber of carburetors\n\nAfter reading each column description it is easy to understand each column name, but it it is impossible for anybody to understand what each variable contains by reading each column name. Just as a example we can say:\n\n- **mpg**: If this case *m* means miles, *p* means per and *g* means gallons. It isn't explicit, *m* sometimes means meters or any other thing. It could be obvious for some with car a basic knowledge, but for many people the meaning of variable could be confusing. To fix this problems let's write word completely.\n\n- **cyl**: It stands for first 3 letters of cylinder, but no all readers will understand that, so it is better to write the complete word and add the unit used.\n\nLet's changes `mtcars` names for more explicit ones.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMtCarsNewNames <-\n  c(\"mpg\" = \"miles_per_gallon\",\n    \"cyl\"= \"cylinders_count\",\n    \"disp\" = \"displacement_in3\",\n    \"hp\" = \"power_hp\",\n    \"drat\" = \"rear_axle_ratio\",\n    \"wt\" = \"weight_klb\",\n    \"qsec\" = \"quarter_mile_secs\",\n    \"vs\" = \"engine_is_straight\",\n    \"am\" = \"transmission_is_manual\",\n    \"gear\" = \"gear_count\",\n    \"carb\" = \"carburetor_count\")\n\nMtCarsRenamed <- mtcars\nnames(MtCarsRenamed) <- MtCarsNewNames[names(mtcars)]\n\nhead(MtCarsRenamed)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  miles_per_gallon cylinders_count displacement_in3 power_hp\nMazda RX4                     21.0               6              160      110\nMazda RX4 Wag                 21.0               6              160      110\nDatsun 710                    22.8               4              108       93\nHornet 4 Drive                21.4               6              258      110\nHornet Sportabout             18.7               8              360      175\nValiant                       18.1               6              225      105\n                  rear_axle_ratio weight_klb quarter_mile_secs\nMazda RX4                    3.90      2.620             16.46\nMazda RX4 Wag                3.90      2.875             17.02\nDatsun 710                   3.85      2.320             18.61\nHornet 4 Drive               3.08      3.215             19.44\nHornet Sportabout            3.15      3.440             17.02\nValiant                      2.76      3.460             20.22\n                  engine_is_straight transmission_is_manual gear_count\nMazda RX4                          0                      1          4\nMazda RX4 Wag                      0                      1          4\nDatsun 710                         1                      1          4\nHornet 4 Drive                     1                      0          3\nHornet Sportabout                  0                      0          3\nValiant                            1                      0          3\n                  carburetor_count\nMazda RX4                        4\nMazda RX4 Wag                    4\nDatsun 710                       1\nHornet 4 Drive                   1\nHornet Sportabout                2\nValiant                          1\n```\n:::\n:::\n\n\nAs we changed the original data it is important to save a new variable specify how data change. In this case we just added the word **renamed** so `mtcars` will keep the same value across the project.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}