{
  "hash": "e795e6c7a5e18c10550244c8965d14f9",
  "result": {
    "markdown": "---\ntitle: \"Advent Of Code 2022\"\nauthor: \"Angel Feliz\"\ndate: \"1 December 2022\"\nexecute:\n  echo: true\n  message: false\n  warning: false\nformat: \n  html:\n    fig-width: 12\n    fig-height: 8\n    fig-align: \"center\"\n    toc: true\n    toc-title: Index\n    toc-location: left\n    self-contained: true\n    number-sections: true\n    smooth-scroll: true\nimage: \"advent-of-code.jpg\"\ncategories: [Challenge]\n---\n\n\n<style>\n\ncode{color: #0c5bd1;}\n\n.center {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  width: 50%;\n}\n\n</style>\n\nIn this post I am sharing my path to complete the 25 days of **Advent of Code** which is a coding challenge of small programming puzzles.\n\n\n\n\n\nLet's start loading package to use and having fun.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\n\nhere <- here::here\n```\n:::\n\n\n# Day 1: Calories Counting \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalories <- readLines(here(\"raw-data\",\"01-input.txt\"))\n```\n:::\n\n\n## Part 1\n\nThe jungle must be too overgrown and difficult to navigate in vehicles or access from the air; the Elves' expedition traditionally goes on foot. As your boats approach land, the Elves begin taking inventory of their supplies. One important consideration is food - in particular, the number of Calories each Elf is carrying (your puzzle input).\n\nIn case the Elves get hungry and need extra snacks, they need to know which Elf to ask: they'd like to know how many Calories are being carried by the Elf carrying the most Calories.\n\nFind the Elf carrying the most Calories. How many total Calories is that Elf carrying?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.table(Elf = cumsum(!calories %like% \"\\\\d\")+1,\n           Calories = as.integer(calories)\n)[, .(total_calories = sum(Calories, na.rm = TRUE)),\n  by = \"Elf\"\n][, max(total_calories)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 72478\n```\n:::\n:::\n\n\n## Part 2\n\nBy the time you calculate the answer to the Elves' question, they've already realized that the Elf carrying the most Calories of food might eventually run out of snacks.\n\nTo avoid this unacceptable situation, the Elves would instead like to know the total Calories carried by the top three Elves carrying the most Calories. That way, even if one of those Elves runs out of snacks, they still have two backups.\n\nFind the top three Elves carrying the most Calories. How many Calories are those Elves carrying in total?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.table(Elf = cumsum(!calories %like% \"\\\\d\")+1,\n           Calories = as.integer(calories)\n)[, .(total_calories = sum(Calories, na.rm = TRUE)),\n  by = \"Elf\"\n][order(-total_calories),\n][1:3\n][, sum(total_calories)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 210367\n```\n:::\n:::\n\n\n<<<<<<< HEAD\n=======\n\n# Day 2: Rock Paper Scissors\n\n## Part 1\n\nAppreciative of your help yesterday, one Elf gives you an encrypted strategy guide (your puzzle input) that they say will be sure to help you win. \"The first column is what your opponent is going to play: A for Rock, B for Paper, and C for Scissors. The second column--\" Suddenly, the Elf is called away to help with someone's tent.\n\nThe second column, you reason, must be what you should play in response: X for Rock, Y for Paper, and Z for Scissors. Winning every time would be suspicious, so the responses must have been carefully chosen.\n\nThe winner of the whole tournament is the player with the highest score. Your total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\n\nWhat would your total score be if everything goes exactly according to your strategy guide?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDecryptScore <- \n  c(\"Rock\" = 1, \"Paper\" = 2 , \"Scissors\" = 3)\n\nWin <- \n  c(\"Scissors\" = \"Rock\", \"Rock\" = \"Paper\", \"Paper\" = \"Scissors\")\n\nDecryptCol1 <-\n  c(\"A\" = \"Rock\",  \"B\" = \"Paper\", \"C\" = \"Scissors\")\n\nDecryptCol2 <- \n  c(\"X\" = \"Rock\", \"Y\" = \"Paper\", \"Z\" = \"Scissors\")\n\nEncryptedGuide <-\ndata.table(guide = readLines(here(\"raw-data\",\"02-input.txt\"))\n  )[, c(\"col1\", \"col2\") := tstrsplit(guide, \" \")]\n\nMyScores <-\n  CJ(col1 = DecryptCol1,\n     col2 = DecryptCol1\n  )[, col2_score := DecryptScore[col2]\n  ][col1 == col2,\n    col2_score := col2_score + 3\n  ][Win[col1] == col2,\n    col2_score := col2_score + 6]\n\ncopy(EncryptedGuide)[, `:=`(col1 = DecryptCol1[col1],\n                            col2 = DecryptCol2[col2])\n][MyScores, on = c(\"col1\",\"col2\"), nomatch = 0\n][, sum(col2_score)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13005\n```\n:::\n:::\n\n\n\n## Part 2\n\nThe Elf finishes helping with the tent and sneaks back over to you. \"Anyway, the second column says how the round needs to end: X means you need to lose, Y means you need to end the round in a draw, and Z means you need to win. Good luck!\"\n\nFollowing the Elf's instructions for the second column, what would your total score be if everything goes exactly according to your strategy guide?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nLose <- names(Win)\nnames(Lose) <- Win\n\ncopy(EncryptedGuide)[, `:=`(col1 = DecryptCol1[col1],\n                            col2 = fcase(col2 == \"X\",\n                                         Lose[DecryptCol1[col1]],\n                                         col2 == \"Y\",\n                                         DecryptCol1[col1],\n                                         col2 == \"Z\",\n                                         Win[DecryptCol1[col1]]))\n                     \n][MyScores, on = c(\"col1\",\"col2\"), nomatch = 0\n][, sum(col2_score)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11373\n```\n:::\n:::\n\n\n\n>>>>>>> dev\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}