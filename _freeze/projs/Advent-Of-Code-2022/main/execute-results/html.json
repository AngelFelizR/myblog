{
  "hash": "7f6a6e86d935762bbe48d72f43a8e069",
  "result": {
    "markdown": "---\ntitle: \"Advent Of Code 2022\"\nauthor: \"Angel Feliz\"\ndate: \"1 December 2022\"\nexecute:\n  echo: true\n  message: false\n  warning: false\nformat: \n  html:\n    fig-width: 12\n    fig-height: 8\n    fig-align: \"center\"\n    toc: true\n    toc-title: Index\n    toc-location: left\n    self-contained: true\n    number-sections: false\n    smooth-scroll: true\nimage: \"advent-of-code.jpg\"\ncategories: [Challenge]\n---\n\n\n<style>\n\ncode{color: #0c5bd1;}\n\n.center {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  width: 50%;\n}\n\n</style>\n\nIn this post I am sharing my path to complete the 25 days of **Advent of Code** which is a coding challenge of small programming puzzles.\n\n\n\n\n\nLet's start loading package to use and having fun.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nlibrary(stringr)\n\nhere <- here::here\n```\n:::\n\n\n\n::: {.panel-tabset}\n\n# Day 1: Calories Counting \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalories <- readLines(here(\"raw-data\",\"01-input.txt\"))\n```\n:::\n\n\n## Part 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.table(Elf = cumsum(!calories %like% \"\\\\d\")+1,\n           Calories = as.integer(calories)\n)[, .(total_calories = sum(Calories, na.rm = TRUE)),\n  by = \"Elf\"\n][, max(total_calories)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 72478\n```\n:::\n:::\n\n\n## Part 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.table(Elf = cumsum(!calories %like% \"\\\\d\")+1,\n           Calories = as.integer(calories)\n)[, .(total_calories = sum(Calories, na.rm = TRUE)),\n  by = \"Elf\"\n][order(-total_calories),\n][1:3\n][, sum(total_calories)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 210367\n```\n:::\n:::\n\n\n\n# Day 2: Rock Paper Scissors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEncryptedGuide <-\ndata.table(guide = readLines(here(\"raw-data\",\"02-input.txt\"))\n  )[, c(\"col1\", \"col2\") := tstrsplit(guide, \" \")]\n```\n:::\n\n\n\n## Part 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDecryptScore <- \n  c(\"Rock\" = 1, \"Paper\" = 2 , \"Scissors\" = 3)\n\nWin <- \n  c(\"Scissors\" = \"Rock\", \"Rock\" = \"Paper\", \"Paper\" = \"Scissors\")\n\nDecryptCol1 <-\n  c(\"A\" = \"Rock\",  \"B\" = \"Paper\", \"C\" = \"Scissors\")\n\nDecryptCol2 <- \n  c(\"X\" = \"Rock\", \"Y\" = \"Paper\", \"Z\" = \"Scissors\")\n\n\nMyScores <-\n  CJ(col1 = DecryptCol1,\n     col2 = DecryptCol1\n  )[, col2_score := DecryptScore[col2]\n  ][col1 == col2,\n    col2_score := col2_score + 3\n  ][Win[col1] == col2,\n    col2_score := col2_score + 6]\n\n\ncopy(EncryptedGuide)[, `:=`(col1 = DecryptCol1[col1],\n                            col2 = DecryptCol2[col2])\n][MyScores, on = c(\"col1\",\"col2\"), nomatch = 0\n][, sum(col2_score)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13005\n```\n:::\n:::\n\n\n\n## Part 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nLose <- names(Win)\nnames(Lose) <- Win\n\ncopy(EncryptedGuide)[, `:=`(col1 = DecryptCol1[col1],\n                            col2 = fcase(col2 == \"X\",\n                                         Lose[DecryptCol1[col1]],\n                                         col2 == \"Y\",\n                                         DecryptCol1[col1],\n                                         col2 == \"Z\",\n                                         Win[DecryptCol1[col1]]))\n                     \n][MyScores, on = c(\"col1\",\"col2\"), nomatch = 0\n][, sum(col2_score)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11373\n```\n:::\n:::\n\n\n\n# Day 3: Rucksack Reorganization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRucksackItems <-\ndata.table(items = readLines(here(\"raw-data\",\"03-input.txt\")))\n```\n:::\n\n\n## Part 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRucksackItems[, .(id = .I,\n                  sack1 = substr(items, 1, nchar(items)/2) ,\n                  sack2 = substr(items, nchar(items)/2 +1, nchar(items)) )\n][, .(sack1 = strsplit(sack1,\"\"),\n      sack2 = strsplit(sack2,\"\")),\n  by = \"id\"\n][, merge(copy(.SD)[, .(sack1 = sack1[[1]]), \"id\"],\n          copy(.SD)[, .(sack2 = sack2[[1]]), \"id\"],\n          by = \"id\", allow.cartesian=TRUE)\n][sack1 == sack2,\n  unique(.SD)\n][, priority := which(sack1 == c(letters,LETTERS)),\n  by = \"id\"\n][, sum(priority)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7878\n```\n:::\n:::\n\n\n## Part 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRucksackItems[, .(id = .I,\n                  group = cumsum(.I %% 3 == 1),\n                  items = strsplit(items,\"\") )\n][, .(items = items[[1]]),\n  by = c(\"group\",\"id\")\n][, .(n_id = uniqueN(id)),\n  by = c(\"items\",\"group\")\n][n_id == 3\n][, priority := which(items == c(letters,LETTERS)),\n  by = \"group\"\n][, sum(priority)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2760\n```\n:::\n:::\n\n\n\n# Day 4: Camp Cleanup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCleanupPlan <- data.table(pair = readLines(here(\"raw-data/04-input.txt\")))\n```\n:::\n\n\n## Part 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCleanupPlan[, c(\"range1_start\",\"range1_end\",\n                \"range2_start\",\"range2_end\") := \n         tstrsplit(pair, \",|-\") |> lapply(as.integer)\n][ (range1_start >=  range2_start & range1_end <= range2_end) |\n   (range2_start >=  range1_start & range2_end <= range1_end),\n   .N]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 511\n```\n:::\n:::\n\n\n\n## Part 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCleanupPlan[, c(\"range1_start\",\"range1_end\",\n                \"range2_start\",\"range2_end\") := \n         tstrsplit(pair, \",|-\") |> lapply(as.integer)\n][, n_intersect := \n    intersect(range1_start:range1_end,\n              range2_start:range2_end) |>\n    length(),\n  by = .I\n][n_intersect > 0, .N]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 821\n```\n:::\n:::\n\n\n\n# Day 5: Supply Stacks\n\n\n::: {.cell}\n\n```{.r .cell-code}\nStacks <- \n  data.table(data = readLines(here(\"raw-data/05-input.txt\")))\n\n\nMovements <- \n  Stacks[data %like% \"^move\"\n  ][, c(\"n_items\",\"from\",\"to\") := \n      str_match(data,\"move (\\\\d+) from (\\\\d+) to (\\\\d+)\")[,-1] |>\n      as.data.table()\n  ][, !c(\"data\")\n  ][, c(\"n_items\",\"from\",\"to\") := .(as.integer(n_items), \n                                    paste0(\"stack\", from),\n                                    paste0(\"stack\", to))]\n\n\nStartingStacks <- \n  Stacks[!data %like% \"^move\",\n         head(.SD, .N-1)\n  ][,{\n    \n    cols <-\n      tail(.SD, 1\n      )[, str_count(data,\"\\\\d+\")] |>\n      seq.int(from = 1, by = 1) |>\n      paste0(\"stack\", num = _)\n    \n    \n    .SD[, head(.SD,.N-1)\n    ][, (cols) := lapply(seq.int(from = 2, by = 4, length.out = length(cols)), \n                         \\(x) str_sub(data, x, x))\n    ][, lapply(.SD, \n               \\(x) fifelse(x %like% \"\\\\w\", x, NA_character_) |> \n                 na.omit() |> \n                 list()),\n      .SDcols = patterns(\"\\\\d$\")] \n    \n    }]\n```\n:::\n\n\n\n## Part 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMovedStacks <-\n  copy(StartingStacks)\n\nfor(move_i in seq_len(nrow(Movements))){\n  \n  n_items <- Movements[move_i, n_items]\n  from <- Movements[move_i, from]\n  to <- Movements[move_i, to]\n  \n  MovedStacks[, (to) := .(c(get(from)[[1]][n_items:1], get(to)[[1]]))]\n  MovedStacks[, (from) := .(get(from)[[1]][-(n_items:1)])]\n  \n}\n\nsapply(MovedStacks,\\(x) x[[1]][1]) |>\n  paste0(collapse = \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"HNSNMTLHQ\"\n```\n:::\n:::\n\n\n\n## Part 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMovedStacks <-\n  copy(StartingStacks)\n\nfor(move_i in seq_len(nrow(Movements))){\n  \n  n_items <- Movements[move_i, n_items]\n  from <- Movements[move_i, from]\n  to <- Movements[move_i, to]\n  \n  MovedStacks[, (to) := .(c(get(from)[[1]][1:n_items], get(to)[[1]]))]\n  MovedStacks[, (from) := .(get(from)[[1]][-(1:n_items)])]\n  \n}\n\nsapply(MovedStacks,\\(x) x[[1]][1]) |>\n  paste0(collapse = \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"RNLFDJMCT\"\n```\n:::\n:::\n\n\n\n# Day 6: Tuning Trouble\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDataStream <- \n data.table(data =readLines(here(\"raw-data/06-input.txt\"))\n )[, id := .I]\n```\n:::\n\n\n\n## Part 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUniqueLetters <- 4\n\ncopy(DataStream)[, data := gsub(\"\",\" \", data)\n][, tidytext::unnest_ngrams(.SD, letter, data, n = UniqueLetters)\n][, n_unique := strsplit(letter,\" \") |> unlist() |> uniqueN(),\n  by = .I\n][, n_letter := (1:.N) - 1 + UniqueLetters,\n  by = \"id\"\n][n_unique == UniqueLetters, \n  unique(.SD, by = \"id\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      id  letter n_unique n_letter\n   <int>  <char>    <int>    <num>\n1:     1 v h p j        4     1804\n```\n:::\n:::\n\n\n## Part 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUniqueLetters <- 14\n\ncopy(DataStream)[, data := gsub(\"\",\" \", data)\n][, tidytext::unnest_ngrams(.SD, letter, data, n = UniqueLetters)\n][, n_unique := strsplit(letter,\" \") |> unlist() |> uniqueN(),\n  by = .I\n][, n_letter := (1:.N) - 1 + UniqueLetters,\n  by = \"id\"\n][n_unique == UniqueLetters, \n  unique(.SD, by = \"id\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      id                      letter n_unique n_letter\n   <int>                      <char>    <int>    <num>\n1:     1 r n f g h s v p c w j d t l       14     2508\n```\n:::\n:::\n\n\n\n# Day 7:???\n## Part 1\n## Part 2\n\n# Day 8:???\n## Part 1\n## Part 2\n\n# Day 9:???\n## Part 1\n## Part 2\n\n# Day 10:???\n## Part 1\n## Part 2\n\n# Day 11:???\n## Part 1\n## Part 2\n\n# Day 12:???\n## Part 1\n## Part 2\n\n# Day 13:???\n## Part 1\n## Part 2\n\n# Day 14:???\n## Part 1\n## Part 2\n \n# Day 15:???\n## Part 1\n## Part 2\n\n# Day 16:???\n## Part 1\n## Part 2\n\n# Day 17:???\n## Part 1\n## Part 2\n\n# Day 18:???\n## Part 1\n## Part 2\n\n# Day 19:???\n## Part 1\n## Part 2\n\n# Day 20:???\n## Part 1\n## Part 2\n\n# Day 21:???\n## Part 1\n## Part 2\n\n# Day 22:???\n## Part 1\n## Part 2\n\n# Day 23:???\n## Part 1\n## Part 2\n\n# Day 24:???\n## Part 1\n## Part 2\n\n# Day 25:???\n## Part 1\n## Part 2\n\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}