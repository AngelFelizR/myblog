---
title: "The Art of Readiable R code"
author: "Angel Feliz"
date: "2023-10-22"
format: 
  html:
    fig-width: 12
    fig-height: 8
    fig-align: "center"
    toc: true
    toc-title: Index
    toc-location: left
    self-contained: true
    number-sections: true
    smooth-scroll: true
image: "readability-tests.png"
categories: [Tutorial]
---

<style>

code{color: #0c5bd1;}

.center {
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 50%;
}

</style>

# Introduction {.unnumbered}

When we start our journey as a programmers it's normal to get exited by the new positives. We get the capacity to do many things that otherwise would be impossible, making projects faster and assuring consistency.

But the problems start when you need to modify a script that you wrote 6 months in the past. That's when you found out that you don't remember why you were applying some specific filters or calculating a value in a odd way.

As a Reporting Analyst and I am always creating and changing scripts and after applying the tips provided in **The Art of Readable Code** by *Dustin Boswell* and *Trevor Foucher* I could reduce the time needed to apply changes from 5 to 2 days (60% faster).

![From: https://uxmastery.com/wp-content/uploads/2013/09/readability-tests.png](readability-tests.png)

# How do you know if your code is readable?

In order a code to be readable needs to:

1. Have explicit names for variables, functions and function arguments.

2. Have commentaries that explain the reasons behind the code. At the end, the reader should know as much as the writer did.

3. Be understood without reading it twice.


# Practical Tecniques

Once we know what we want to achieve it results really useful to know some techniques that might help us for that purpose. In this article, we will use `R` to make all the our examples and the `datasets::mtcars` data.frame as it is widely use for simple examples.

## Naming variables

Defining good variables names in general is more important than writing a good comment and should try to give as much context as possible in variable name. Some tips to follow are:

1. Variable should be named base on its value. 
    - Words like *is*, *has* and *should* make clearer a Boolean variables by avoiding negations.
    - Looping index can be identify by using a suffix, for example: club_i or table_i rather just i

2. If the variable has a measurement we can use suffixes to make it explicit.
  
3. A variable should remain the same value across the project. 
    - If a variable is changed in many stages the variable name should show the current stage.
    - If you need to create many temporal intermediate variables to get a final resulta it's better to write a function.

If we run `?mtcars` in the `R` console we can see a description of each variable in the `mtcars` dataset. After reading each column description it is easy to understand each column name, but it is almost impossible to understand what each variable contains by just reading each column name. Let's see two examples:

- **mpg**: In this case, *m* means *miles*, *p* means *per* and *g* means *gallons*. It isn't explicit, *m* could mean meters or any other thing. It could be obvious for some with car a basic knowledge, but for many people the meaning of variable could be confusing. To fix this problems let's write word completely.

- **cyl**: It stands for first 3 letters of cylinder, but no all readers will understand that, so it is better to write the complete word and add the unit used.

Once understand the point, we can create a new `data.frame` applying tips mencined.

```{r}

MtCarsNewNames <-
  c("mpg" = "miles_per_gallon",
    "cyl"= "cylinders_count",
    "disp" = "displacement_in3",
    "hp" = "power_hp",
    "drat" = "rear_axle_ratio",
    "wt" = "weight_klb",
    "qsec" = "quarter_mile_secs",
    "vs" = "engine_is_straight",
    "am" = "transmission_is_manual",
    "gear" = "gear_count",
    "carb" = "carburetor_count")

MtCarsRenamed <- mtcars
names(MtCarsRenamed) <- MtCarsNewNames[names(mtcars)]

head(MtCarsRenamed)

```

As we changed the original data it is important to save a new variable specify how data change. In this case we just added the word **renamed** so `mtcars` will keep the same value across the project.

To write good variable names might take some iteration and you might need to play devil's advocate in under to find out a better name than the initial one.

## Naming functions and its arguments

Creating explicit functions names makes much easier to understand any code. I could make a really complex process to become a very simple one. Some tips to follow are:

1. Start the function with a explicit verb to avoid misunderstandings. Below we can see some recommendations from the book.

| Word | Alternatives |
|:----:|:-------------|
| send | deliver, dispatch, announce, distribute, route |
| find | search, extract, locate, recover |
| start | launch, create, begin, open |
| make | create, set up, build, generate, compose, add, new |


2. Avoid using abstract names that don't desecrate the output.

3. Some general recommendations for function arguments are:

| Word | Use|
|:-----|:---|
|min and max | Useful to denominate include limits|
|first and last| Useful to denominate exclusive limits|
|begin and end| Useful to denominate ether inconclusive or exclusive limits|

For example, we want to create a function that filters the value over a specific percentile of any variable, we named a for example `filter_percentile`, but that could bring some confusion, some could understand that you will keep or remove all values equals to the percentile value. A better name can be `keep_over_percentile`.

```{r}

extract_over_percentile <- function(DF, variable, prob){
  
  DF[DF[[variable]] > quantile(DF[[variable]], na.rm = TRUE, probs = prob), ]
  
}

MtCarsRenamed |>
  extract_over_percentile(variable = "miles_per_gallon", prob = 0.50) |>
  nrow()

```


## Commenting correctly

Writing good comments can be challenging as everything looks so clear when are writing code but here are some tips that might help you:

1. Each project should have a README file an introduction to the code with important point that you would tell a new team member.

2. Some important topics to comment are:
    * How a function behaves in some situations and also a good example.
    * Why do we use certain method.
    * Things that we couldn't solve and how we would do it.
    * Explaining why do we use certain values in constants.

3. If you are commenting to describe some code reading the comment should be faster than reading the code.

4. Donâ€™t comment bad names, fix them instead.

5. Write commentaries in 3 steps:
    * Write down whatever comment is on your mind
    * Read the comment and see what needs to be improved
    * Make improvements
   
    
Let's see a quick example here I clarify reasons behaind the code.
    
```{r}

# Selecting cars with high energy efficiency as 
# the final user doesn't care about car speed or power.

EffientCars <-
  MtCarsRenamed[order(-MtCarsRenamed$miles_per_gallon), 
                c("miles_per_gallon", 
                  "transmission_is_manual",
                  "engine_is_straight")] |>
  extract_over_percentile(variable = "miles_per_gallon", prob = 0.75)

```
    
    
## Code style

Code style is important as it allows you to scan quickly many lines of code before reading the detail of each line. Some advice to improve code style are:

1. Ensure that similar code looks similar, it might help you to identify important spelling mistakes.

2. Complete all the process you need to do related to one task before moving to other. For example, import all your data before applying changes and transform all your data before exporting reports. The function `source` it's very useful if we want to break log code into main parts.

3. Avoid repetitive comments, instead divide your code into blocks with comments.

4. Use `|>` from base R or `%>%` from magrittr package to avoid creating temporal variable without losing readability.

5. When making `TRUE` or `FALSE` test it useful to store the result in a variable with a explicit of what was the test about.

```{r}

HasMoreThan5Cars <- nrow(EffientCars) > 5

if(HasMoreThan5Cars) EffientCars

```


6. Write constants on the right side of the Boolean test.

```{r}
#| eval: false

# It's better to write
nrow(EffientCars) > 5

# Than writing
5 <= nrow(EffientCars)

```


7. Avoid writing nested if stamens, instead try to negate each Boolean test.

```{r}
#| eval: false

# it's better to write
extract_over_percentile <- function(DF, variable, prob){
  
  if(!is.data.frame(DF)) stop("DF must be a data.frame")
  if(typeof(variable) != "character") stop("variable must be a character")
  if(!is.numeric(DF[[variable]])) stop(paste0(variable, " must be a character"))
  if(typeof(prob) != "double") stop("prob must be a double")
  if(!all(prob > 0 & prob < 1)) stop("prob must be in range (0,1)")
  
  DF[DF[[variable]] > quantile(DF[[variable]], na.rm = TRUE, probs = prob), ]
  
}


# Than writing
extract_over_percentile <- function(DF, variable, prob){
  
  if(is.data.frame(DF)){
    
    if(typeof(variable) == "character"){
      
      if(is.numeric(DF[[variable]])){
        
        if(typeof(prob) == "double"){
          
          if(all(prob > 0 & prob < 1)){
            
   DF[DF[[variable]] > quantile(DF[[variable]], na.rm = TRUE, probs = prob), ]   
            
          }else{
            stop("prob must be in range (0,1)")
          }
          
        }else{
          stop("prob must be a double")
        }
        
      }else{
        stop(paste0(variable, " must be a character")) 
      }
      
    }else{
      stop("variable must be a character")
    }
  }else{
    stop("DF must be a data.frame")
  }

}

```


8. You can apply Morgan's Law if A and B are Boolean variables: **! ( A | B) == !A & !B**

9. If a function it's getting long, you can extract from the function one or more secondary functions that solve smaller problems.

```{r}

# Creating validation functions

validate_df <- function(DF){
  if(!is.data.frame(DF)) stop("DF must be a data.frame")
}

validate_variable <- function(DF, variable){
  if(typeof(variable) != "character") stop("variable must be a character")
  if(!is.numeric(DF[[variable]])) stop(paste0(variable, " must be a character"))
}

validate_prob <- function(prob) {
  if(typeof(prob) != "double") stop("prob must be a double")
  if(!all(prob > 0 & prob < 1)) stop("prob must be in range (0,1)")
  if(length(prob) != 1) stop("prob must have lenght == 1")
}


# Updating core function

extract_over_percentile <- function(DF, variable, prob){
  
  validate_df(DF)
  validate_variable(DF, variable)
  validate_prob(prob)
  
  DF[DF[[variable]] > quantile(DF[[variable]], na.rm = TRUE, probs = prob), ]
  
}

MtCarsRenamed[order(-MtCarsRenamed$miles_per_gallon), 
              c("miles_per_gallon", 
                "transmission_is_manual",
                "engine_is_straight")] |>
  extract_over_percentile(variable = "miles_per_gallon", prob = 0.75)


```

# Conclusion {.unnumbered}

Writing high quality code it's important, but it takes time and practice. At this point, I just want to share the next words by Hadley Wickham.

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The only way to write good code is to write tons of shitty code first. Feeling shame about bad code stops you from getting to good code</p>&mdash; Hadley Wickham (@hadleywickham) <a href="https://twitter.com/hadleywickham/status/589068687669243905?ref_src=twsrc%5Etfw">April 17, 2015</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

I hope you have learnt something new that you find uselful.
