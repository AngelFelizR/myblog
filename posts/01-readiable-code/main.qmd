---
title: "The Art of Readiable R code"
author: "Angel Feliz"
editor: source
format: 
  html:
    fig-width: 12
    fig-height: 8
    fig-align: "center"
    toc: true
    toc-title: Index
    toc-location: left
    self-contained: true
    number-sections: true
    smooth-scroll: true
image: "readable-code-book.jpg"
categories: [Learning Journey]
---

<style>

code{color: #0c5bd1;}

.center {
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 50%;
}

</style>

# Introduction {.unnumbered}

When we start our journey as a programmers it's normal to get exited by the new positives. We get the capacity to do many things that otherwise would be impossible, making projects faster and assuring consistency.

But the problems start when you need to modify a script that you wrote 6 in the past. That's when you found out that you don't remember why you were applying some specific filters or calculating a value in a odd way.

As a Reporting Analyst and I am always creating and changing scripts and after applying the tips provided in the book I could reduce the time needed to apply changes from 5 to 2 days (60% faster).

<img src="readable-code-book.jpg" alt="Source: https://www.amazon.com/Art-Readable-Code-Practical-Techniques/dp/0596802293" class="center">


# How do you know if your code is readable?

In order a code to be readable needs to:

1. Have explicit names for variables, functions and function arguments.

2. Have commentaries that explain the reasons behind the code. At the end, the reader should know as much as the writer did.

3. Be understood without reading it twice.


# Practical Tecniques

Once we know what we want to achieve it results really useful to know some techniques that might help us for that purpose. In this article, we will use `R` to make all the our examples and the `datasets::mtcars` data.frame as it is widely use for simple examples.

## Naming variables

Defining good variables names in general is more important than writing a good comment and should try to give as much context as possible in variable name. Some tips to follow are:

1. Variable should be named base on its value. 
    - Words like *is*, *has* and *should* make clearer a Boolean variables by avoiding negations.
    - Looping index can be identify by using a suffix, for example: club_i or table_i rather just i

2. If the variable has a measurement we can use suffixes to make it explicit.
  
3. A variable should remain the same value across the project. 
    - If a variable is changed in many stages the variable name should show the current stage.
    - If you need to create many temporal intermediate variables to get a final resulta it's better to write a function.

If we run `?mtcars` in the `R` console we can see a description of each variable in the `mtcars` dataset. After reading each column description it is easy to understand each column name, but it is almost impossible to understand what each variable contains by just reading each column name. Let's see two examples:

- **mpg**: In this case, *m* means *miles*, *p* means *per* and *g* means *gallons*. It isn't explicit, *m* could mean meters or any other thing. It could be obvious for some with car a basic knowledge, but for many people the meaning of variable could be confusing. To fix this problems let's write word completely.

- **cyl**: It stands for first 3 letters of cylinder, but no all readers will understand that, so it is better to write the complete word and add the unit used.

Once understand the point, we can create a new `data.frame` applying tips mencined.

```{r}

MtCarsNewNames <-
  c("mpg" = "miles_per_gallon",
    "cyl"= "cylinders_count",
    "disp" = "displacement_in3",
    "hp" = "power_hp",
    "drat" = "rear_axle_ratio",
    "wt" = "weight_klb",
    "qsec" = "quarter_mile_secs",
    "vs" = "engine_is_straight",
    "am" = "transmission_is_manual",
    "gear" = "gear_count",
    "carb" = "carburetor_count")

MtCarsRenamed <- mtcars
names(MtCarsRenamed) <- MtCarsNewNames[names(mtcars)]

head(MtCarsRenamed)

```

As we changed the original data it is important to save a new variable specify how data change. In this case we just added the word **renamed** so `mtcars` will keep the same value across the project.

To write good variable names might take some iteration and you might need to play devil's advocate in under to find out a better name than the initial one.

## Naming functions and arguments

Creating explicit functions names makes much easier to understand any code. I could make a really complex process to become a very simple one. Some tips to follow are:

1. Start the function with a explicit verb to avoid misunderstandings. Below we can see some recommendations from the book.

| Word | Alternatives |
|:----:|------------:|
| send | deliver, dispatch, announce, distribute, route |
| find | search, extract, locate, recover |
| start | launch, create, begin, open |
| make | create, set up, build, generate, compose, add, new |


2. Avoid using abstract names that don't desecrate the output.

3. Some general recommendations for function arguments are:

| Word | Use|
|:-----|:---|
|min and max | Useful to denominate include limits|
|first and last| Useful to denominate exclusive limits|
|begin and end| Useful to denominate ether inconclusive or exclusive limits|



