[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "The Art of Readiable R code\n\n\n\n\n\n\n\nTutorial\n\n\n\n\n\n\n\n\n\n\n\nOct 22, 2023\n\n\nAngel Feliz\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Angel Feliz",
    "section": "",
    "text": "Senior Reporting Analyst with 2 years’ experience using R to process and create business reports in formats as Excel, Word, Power Point, and html.\nProven experience integrating ad hoc regular expressions to transform, extract and validate text data in data pipelines to find abnormalities and automate repetitive tasks; improving reporting accuracy, reducing waiting times and opening new possibilities to empower decision makers.\nAutodidactic, self-motivated, inquisitive, and eager to apply data science techniques to create business value and increase ROI for your company"
  },
  {
    "objectID": "index.html#bio",
    "href": "index.html#bio",
    "title": "Angel Feliz",
    "section": "",
    "text": "Senior Reporting Analyst with 2 years’ experience using R to process and create business reports in formats as Excel, Word, Power Point, and html.\nProven experience integrating ad hoc regular expressions to transform, extract and validate text data in data pipelines to find abnormalities and automate repetitive tasks; improving reporting accuracy, reducing waiting times and opening new possibilities to empower decision makers.\nAutodidactic, self-motivated, inquisitive, and eager to apply data science techniques to create business value and increase ROI for your company"
  },
  {
    "objectID": "posts/01-readiable-code/main.html",
    "href": "posts/01-readiable-code/main.html",
    "title": "The Art of Readiable R code",
    "section": "",
    "text": "When we start our journey as a programmers it’s normal to get exited by the new positives. We get the capacity to do many things that otherwise would be impossible, making projects faster and assuring consistency.\nBut the problems start when you need to modify a script that you wrote 6 months in the past. That’s when you found out that you don’t remember why you were applying some specific filters or calculating a value in a odd way.\nAs a Reporting Analyst and I am always creating and changing scripts and after applying the tips provided in The Art of Readable Code by Dustin Boswell and Trevor Foucher I could reduce the time needed to apply changes from 5 to 2 days (60% faster).\n\n\n\nFrom: https://uxmastery.com/wp-content/uploads/2013/09/readability-tests.png"
  },
  {
    "objectID": "posts/01-readiable-code/main.html#naming-variables",
    "href": "posts/01-readiable-code/main.html#naming-variables",
    "title": "The Art of Readiable R code",
    "section": "2.1 Naming variables",
    "text": "2.1 Naming variables\nDefining good variables names in general is more important than writing a good comment and should try to give as much context as possible in variable name. Some tips to follow are:\n\nVariable should be named base on its value.\n\nWords like is, has and should make clearer a Boolean variables by avoiding negations.\nLooping index can be identify by using a suffix, for example: club_i or table_i rather just i\n\nIf the variable has a measurement we can use suffixes to make it explicit.\nA variable should remain the same value across the project.\n\nIf a variable is changed in many stages the variable name should show the current stage.\nIf you need to create many temporal intermediate variables to get a final resulta it’s better to write a function.\n\n\nIf we run ?mtcars in the R console we can see a description of each variable in the mtcars dataset. After reading each column description it is easy to understand each column name, but it is almost impossible to understand what each variable contains by just reading each column name. Let’s see two examples:\n\nmpg: In this case, m means miles, p means per and g means gallons. It isn’t explicit, m could mean meters or any other thing. It could be obvious for some with car a basic knowledge, but for many people the meaning of variable could be confusing. To fix this problems let’s write word completely.\ncyl: It stands for first 3 letters of cylinder, but no all readers will understand that, so it is better to write the complete word and add the unit used.\n\nOnce understand the point, we can create a new data.frame applying tips mencined.\n\nMtCarsNewNames &lt;-\n  c(\"mpg\" = \"miles_per_gallon\",\n    \"cyl\"= \"cylinders_count\",\n    \"disp\" = \"displacement_in3\",\n    \"hp\" = \"power_hp\",\n    \"drat\" = \"rear_axle_ratio\",\n    \"wt\" = \"weight_klb\",\n    \"qsec\" = \"quarter_mile_secs\",\n    \"vs\" = \"engine_is_straight\",\n    \"am\" = \"transmission_is_manual\",\n    \"gear\" = \"gear_count\",\n    \"carb\" = \"carburetor_count\")\n\nMtCarsRenamed &lt;- mtcars\nnames(MtCarsRenamed) &lt;- MtCarsNewNames[names(mtcars)]\n\nhead(MtCarsRenamed)\n\n                  miles_per_gallon cylinders_count displacement_in3 power_hp\nMazda RX4                     21.0               6              160      110\nMazda RX4 Wag                 21.0               6              160      110\nDatsun 710                    22.8               4              108       93\nHornet 4 Drive                21.4               6              258      110\nHornet Sportabout             18.7               8              360      175\nValiant                       18.1               6              225      105\n                  rear_axle_ratio weight_klb quarter_mile_secs\nMazda RX4                    3.90      2.620             16.46\nMazda RX4 Wag                3.90      2.875             17.02\nDatsun 710                   3.85      2.320             18.61\nHornet 4 Drive               3.08      3.215             19.44\nHornet Sportabout            3.15      3.440             17.02\nValiant                      2.76      3.460             20.22\n                  engine_is_straight transmission_is_manual gear_count\nMazda RX4                          0                      1          4\nMazda RX4 Wag                      0                      1          4\nDatsun 710                         1                      1          4\nHornet 4 Drive                     1                      0          3\nHornet Sportabout                  0                      0          3\nValiant                            1                      0          3\n                  carburetor_count\nMazda RX4                        4\nMazda RX4 Wag                    4\nDatsun 710                       1\nHornet 4 Drive                   1\nHornet Sportabout                2\nValiant                          1\n\n\nAs we changed the original data it is important to save a new variable specify how data change. In this case we just added the word renamed so mtcars will keep the same value across the project.\nTo write good variable names might take some iteration and you might need to play devil’s advocate in under to find out a better name than the initial one."
  },
  {
    "objectID": "posts/01-readiable-code/main.html#naming-functions-and-its-arguments",
    "href": "posts/01-readiable-code/main.html#naming-functions-and-its-arguments",
    "title": "The Art of Readiable R code",
    "section": "2.2 Naming functions and its arguments",
    "text": "2.2 Naming functions and its arguments\nCreating explicit functions names makes much easier to understand any code. I could make a really complex process to become a very simple one. Some tips to follow are:\n\nStart the function with a explicit verb to avoid misunderstandings. Below we can see some recommendations from the book.\n\n\n\n\nWord\nAlternatives\n\n\n\n\nsend\ndeliver, dispatch, announce, distribute, route\n\n\nfind\nsearch, extract, locate, recover\n\n\nstart\nlaunch, create, begin, open\n\n\nmake\ncreate, set up, build, generate, compose, add, new\n\n\n\n\nAvoid using abstract names that don’t desecrate the output.\nSome general recommendations for function arguments are:\n\n\n\n\n\n\n\n\nWord\nUse\n\n\n\n\nmin and max\nUseful to denominate include limits\n\n\nfirst and last\nUseful to denominate exclusive limits\n\n\nbegin and end\nUseful to denominate ether inconclusive or exclusive limits\n\n\n\nFor example, we want to create a function that filters the value over a specific percentile of any variable, we named a for example filter_percentile, but that could bring some confusion, some could understand that you will keep or remove all values equals to the percentile value. A better name can be keep_over_percentile.\n\nextract_over_percentile &lt;- function(DF, variable, prob){\n  \n  DF[DF[[variable]] &gt; quantile(DF[[variable]], na.rm = TRUE, probs = prob), ]\n  \n}\n\nMtCarsRenamed |&gt;\n  extract_over_percentile(variable = \"miles_per_gallon\", prob = 0.50) |&gt;\n  nrow()\n\n[1] 15"
  },
  {
    "objectID": "posts/01-readiable-code/main.html#commenting-correctly",
    "href": "posts/01-readiable-code/main.html#commenting-correctly",
    "title": "The Art of Readiable R code",
    "section": "2.3 Commenting correctly",
    "text": "2.3 Commenting correctly\nWriting good comments can be challenging as everything looks so clear when are writing code but here are some tips that might help you:\n\nEach project should have a README file an introduction to the code with important point that you would tell a new team member.\nSome important topics to comment are:\n\nHow a function behaves in some situations and also a good example.\nWhy do we use certain method.\nThings that we couldn’t solve and how we would do it.\nExplaining why do we use certain values in constants.\n\nIf you are commenting to describe some code reading the comment should be faster than reading the code.\nDon’t comment bad names, fix them instead.\nWrite commentaries in 3 steps:\n\nWrite down whatever comment is on your mind\nRead the comment and see what needs to be improved\nMake improvements\n\n\nLet’s see a quick example here I clarify reasons behaind the code.\n\n# Selecting cars with high energy efficiency as \n# the final user doesn't care about car speed or power.\n\nEffientCars &lt;-\n  MtCarsRenamed[order(-MtCarsRenamed$miles_per_gallon), \n                c(\"miles_per_gallon\", \n                  \"transmission_is_manual\",\n                  \"engine_is_straight\")] |&gt;\n  extract_over_percentile(variable = \"miles_per_gallon\", prob = 0.75)"
  },
  {
    "objectID": "posts/01-readiable-code/main.html#code-style",
    "href": "posts/01-readiable-code/main.html#code-style",
    "title": "The Art of Readiable R code",
    "section": "2.4 Code style",
    "text": "2.4 Code style\nCode style is important as it allows you to scan quickly many lines of code before reading the detail of each line. Some advice to improve code style are:\n\nEnsure that similar code looks similar, it might help you to identify important spelling mistakes.\nComplete all the process you need to do related to one task before moving to other. For example, import all your data before applying changes and transform all your data before exporting reports. The function source it’s very useful if we want to break log code into main parts.\nAvoid repetitive comments, instead divide your code into blocks with comments.\nUse |&gt; from base R or %&gt;% from magrittr package to avoid creating temporal variable without losing readability.\nWhen making TRUE or FALSE test it useful to store the result in a variable with a explicit of what was the test about.\n\n\nHasMoreThan5Cars &lt;- nrow(EffientCars) &gt; 5\n\nif(HasMoreThan5Cars) EffientCars\n\n               miles_per_gallon transmission_is_manual engine_is_straight\nToyota Corolla             33.9                      1                  1\nFiat 128                   32.4                      1                  1\nHonda Civic                30.4                      1                  1\nLotus Europa               30.4                      1                  1\nFiat X1-9                  27.3                      1                  1\nPorsche 914-2              26.0                      1                  0\nMerc 240D                  24.4                      0                  1\n\n\n\nWrite constants on the right side of the Boolean test.\n\n\n# It's better to write\nnrow(EffientCars) &gt; 5\n\n# Than writing\n5 &lt;= nrow(EffientCars)\n\n\nAvoid writing nested if stamens, instead try to negate each Boolean test.\n\n\n# it's better to write\nextract_over_percentile &lt;- function(DF, variable, prob){\n  \n  if(!is.data.frame(DF)) stop(\"DF must be a data.frame\")\n  if(typeof(variable) != \"character\") stop(\"variable must be a character\")\n  if(!is.numeric(DF[[variable]])) stop(paste0(variable, \" must be a character\"))\n  if(typeof(prob) != \"double\") stop(\"prob must be a double\")\n  if(!all(prob &gt; 0 & prob &lt; 1)) stop(\"prob must be in range (0,1)\")\n  \n  DF[DF[[variable]] &gt; quantile(DF[[variable]], na.rm = TRUE, probs = prob), ]\n  \n}\n\n\n# Than writing\nextract_over_percentile &lt;- function(DF, variable, prob){\n  \n  if(is.data.frame(DF)){\n    \n    if(typeof(variable) == \"character\"){\n      \n      if(is.numeric(DF[[variable]])){\n        \n        if(typeof(prob) == \"double\"){\n          \n          if(all(prob &gt; 0 & prob &lt; 1)){\n            \n   DF[DF[[variable]] &gt; quantile(DF[[variable]], na.rm = TRUE, probs = prob), ]   \n            \n          }else{\n            stop(\"prob must be in range (0,1)\")\n          }\n          \n        }else{\n          stop(\"prob must be a double\")\n        }\n        \n      }else{\n        stop(paste0(variable, \" must be a character\")) \n      }\n      \n    }else{\n      stop(\"variable must be a character\")\n    }\n  }else{\n    stop(\"DF must be a data.frame\")\n  }\n\n}\n\n\nYou can apply Morgan’s Law if A and B are Boolean variables: ! ( A | B) == !A & !B\nIf a function it’s getting long, you can extract from the function one or more secondary functions that solve smaller problems.\n\n\n# Creating validation functions\n\nvalidate_df &lt;- function(DF){\n  if(!is.data.frame(DF)) stop(\"DF must be a data.frame\")\n}\n\nvalidate_variable &lt;- function(DF, variable){\n  if(typeof(variable) != \"character\") stop(\"variable must be a character\")\n  if(!is.numeric(DF[[variable]])) stop(paste0(variable, \" must be a character\"))\n}\n\nvalidate_prob &lt;- function(prob) {\n  if(typeof(prob) != \"double\") stop(\"prob must be a double\")\n  if(!all(prob &gt; 0 & prob &lt; 1)) stop(\"prob must be in range (0,1)\")\n  if(length(prob) != 1) stop(\"prob must have lenght == 1\")\n}\n\n\n# Updating core function\n\nextract_over_percentile &lt;- function(DF, variable, prob){\n  \n  validate_df(DF)\n  validate_variable(DF, variable)\n  validate_prob(prob)\n  \n  DF[DF[[variable]] &gt; quantile(DF[[variable]], na.rm = TRUE, probs = prob), ]\n  \n}\n\nMtCarsRenamed[order(-MtCarsRenamed$miles_per_gallon), \n              c(\"miles_per_gallon\", \n                \"transmission_is_manual\",\n                \"engine_is_straight\")] |&gt;\n  extract_over_percentile(variable = \"miles_per_gallon\", prob = 0.75)\n\n               miles_per_gallon transmission_is_manual engine_is_straight\nToyota Corolla             33.9                      1                  1\nFiat 128                   32.4                      1                  1\nHonda Civic                30.4                      1                  1\nLotus Europa               30.4                      1                  1\nFiat X1-9                  27.3                      1                  1\nPorsche 914-2              26.0                      1                  0\nMerc 240D                  24.4                      0                  1"
  }
]