---
title: "Advent Of Code 2022"
author: "Angel Feliz"
date: "1 December 2022"
execute:
  echo: true
  message: false
  warning: false
format: 
  html:
    fig-width: 12
    fig-height: 8
    fig-align: "center"
    toc: true
    toc-title: Index
    toc-location: left
    self-contained: true
    number-sections: false
    smooth-scroll: true
image: "advent-of-code.jpg"
categories: [Challenge]
---

<style>

code{color: #0c5bd1;}

.center {
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 50%;
}

</style>

In this post I am sharing my path to complete the 25 days of **Advent of Code** which is a coding challenge of small programming puzzles.

```{r package-version-check}
#| echo: false
#| include: false

if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv")
renv::restore()

```

Let's start loading package to use and having fun.

```{r}
library(data.table)
library(stringr)

here <- here::here
```


::: {.panel-tabset}

# Day 1: Calories Counting 

```{r}
calories <- readLines(here("raw-data","01-input.txt"))
```

## Part 1


```{r}

data.table(Elf = cumsum(!calories %like% "\\d")+1,
           Calories = as.integer(calories)
)[, .(total_calories = sum(Calories, na.rm = TRUE)),
  by = "Elf"
][, max(total_calories)]

```

## Part 2


```{r}

data.table(Elf = cumsum(!calories %like% "\\d")+1,
           Calories = as.integer(calories)
)[, .(total_calories = sum(Calories, na.rm = TRUE)),
  by = "Elf"
][order(-total_calories),
][1:3
][, sum(total_calories)]

```


# Day 2: Rock Paper Scissors

```{r}

EncryptedGuide <-
data.table(guide = readLines(here("raw-data","02-input.txt"))
  )[, c("col1", "col2") := tstrsplit(guide, " ")]

```


## Part 1


```{r}

DecryptScore <- 
  c("Rock" = 1, "Paper" = 2 , "Scissors" = 3)

Win <- 
  c("Scissors" = "Rock", "Rock" = "Paper", "Paper" = "Scissors")

DecryptCol1 <-
  c("A" = "Rock",  "B" = "Paper", "C" = "Scissors")

DecryptCol2 <- 
  c("X" = "Rock", "Y" = "Paper", "Z" = "Scissors")


MyScores <-
  CJ(col1 = DecryptCol1,
     col2 = DecryptCol1
  )[, col2_score := DecryptScore[col2]
  ][col1 == col2,
    col2_score := col2_score + 3
  ][Win[col1] == col2,
    col2_score := col2_score + 6]


copy(EncryptedGuide)[, `:=`(col1 = DecryptCol1[col1],
                            col2 = DecryptCol2[col2])
][MyScores, on = c("col1","col2"), nomatch = 0
][, sum(col2_score)]

```


## Part 2

```{r}

Lose <- names(Win)
names(Lose) <- Win

copy(EncryptedGuide)[, `:=`(col1 = DecryptCol1[col1],
                            col2 = fcase(col2 == "X",
                                         Lose[DecryptCol1[col1]],
                                         col2 == "Y",
                                         DecryptCol1[col1],
                                         col2 == "Z",
                                         Win[DecryptCol1[col1]]))
                     
][MyScores, on = c("col1","col2"), nomatch = 0
][, sum(col2_score)]

```


# Day 3: Rucksack Reorganization

```{r}
RucksackItems <-
data.table(items = readLines(here("raw-data","03-input.txt")))

```

## Part 1


```{r}

RucksackItems[, .(id = .I,
                  sack1 = substr(items, 1, nchar(items)/2) ,
                  sack2 = substr(items, nchar(items)/2 +1, nchar(items)) )
][, .(sack1 = strsplit(sack1,""),
      sack2 = strsplit(sack2,"")),
  by = "id"
][, merge(copy(.SD)[, .(sack1 = sack1[[1]]), "id"],
          copy(.SD)[, .(sack2 = sack2[[1]]), "id"],
          by = "id", allow.cartesian=TRUE)
][sack1 == sack2,
  unique(.SD)
][, priority := which(sack1 == c(letters,LETTERS)),
  by = "id"
][, sum(priority)]

```

## Part 2


```{r}

RucksackItems[, .(id = .I,
                  group = cumsum(.I %% 3 == 1),
                  items = strsplit(items,"") )
][, .(items = items[[1]]),
  by = c("group","id")
][, .(n_id = uniqueN(id)),
  by = c("items","group")
][n_id == 3
][, priority := which(items == c(letters,LETTERS)),
  by = "group"
][, sum(priority)]


```


# Day 4: Camp Cleanup

```{r}
CleanupPlan <- data.table(pair = readLines(here("raw-data/04-input.txt")))
```

## Part 1


```{r}

CleanupPlan[, c("range1_start","range1_end",
                "range2_start","range2_end") := 
         tstrsplit(pair, ",|-") |> lapply(as.integer)
][ (range1_start >=  range2_start & range1_end <= range2_end) |
   (range2_start >=  range1_start & range2_end <= range1_end),
   .N]

```


## Part 2


```{r}

CleanupPlan[, c("range1_start","range1_end",
                "range2_start","range2_end") := 
         tstrsplit(pair, ",|-") |> lapply(as.integer)
][, n_intersect := 
    intersect(range1_start:range1_end,
              range2_start:range2_end) |>
    length(),
  by = .I
][n_intersect > 0, .N]

```


# Day 5: Supply Stacks

```{r}

Stacks <- 
  data.table(data = readLines(here("raw-data/05-input.txt")))


Movements <- 
  Stacks[data %like% "^move"
  ][, c("n_items","from","to") := 
      str_match(data,"move (\\d+) from (\\d+) to (\\d+)")[,-1] |>
      as.data.table()
  ][, !c("data")
  ][, c("n_items","from","to") := .(as.integer(n_items), 
                                    paste0("stack", from),
                                    paste0("stack", to))]


StartingStacks <- 
  Stacks[!data %like% "^move",
         head(.SD, .N-1)
  ][,{
    
    cols <-
      tail(.SD, 1
      )[, str_count(data,"\\d+")] |>
      seq.int(from = 1, by = 1) |>
      paste0("stack", num = _)
    
    
    .SD[, head(.SD,.N-1)
    ][, (cols) := lapply(seq.int(from = 2, by = 4, length.out = length(cols)), 
                         \(x) str_sub(data, x, x))
    ][, lapply(.SD, 
               \(x) fifelse(x %like% "\\w", x, NA_character_) |> 
                 na.omit() |> 
                 list()),
      .SDcols = patterns("\\d$")] 
    
    }]


```


## Part 1

```{r}

MovedStacks <-
  copy(StartingStacks)

for(move_i in seq_len(nrow(Movements))){
  
  n_items <- Movements[move_i, n_items]
  from <- Movements[move_i, from]
  to <- Movements[move_i, to]
  
  MovedStacks[, (to) := .(c(get(from)[[1]][n_items:1], get(to)[[1]]))]
  MovedStacks[, (from) := .(get(from)[[1]][-(n_items:1)])]
  
}

sapply(MovedStacks,\(x) x[[1]][1]) |>
  paste0(collapse = "")

```


## Part 2

```{r}

MovedStacks <-
  copy(StartingStacks)

for(move_i in seq_len(nrow(Movements))){
  
  n_items <- Movements[move_i, n_items]
  from <- Movements[move_i, from]
  to <- Movements[move_i, to]
  
  MovedStacks[, (to) := .(c(get(from)[[1]][1:n_items], get(to)[[1]]))]
  MovedStacks[, (from) := .(get(from)[[1]][-(1:n_items)])]
  
}

sapply(MovedStacks,\(x) x[[1]][1]) |>
  paste0(collapse = "")

```


# Day 6: Tuning Trouble

```{r}

DataStream <- 
 data.table(data =readLines(here("raw-data/06-input.txt"))
 )[, id := .I]

```


## Part 1

```{r}

UniqueLetters <- 4

copy(DataStream)[, data := gsub(""," ", data)
][, tidytext::unnest_ngrams(.SD, letter, data, n = UniqueLetters)
][, n_unique := strsplit(letter," ") |> unlist() |> uniqueN(),
  by = .I
][, n_letter := (1:.N) - 1 + UniqueLetters,
  by = "id"
][n_unique == UniqueLetters, 
  unique(.SD, by = "id")]

```

## Part 2

```{r}

UniqueLetters <- 14

copy(DataStream)[, data := gsub(""," ", data)
][, tidytext::unnest_ngrams(.SD, letter, data, n = UniqueLetters)
][, n_unique := strsplit(letter," ") |> unlist() |> uniqueN(),
  by = .I
][, n_letter := (1:.N) - 1 + UniqueLetters,
  by = "id"
][n_unique == UniqueLetters, 
  unique(.SD, by = "id")]

```


# Day 7: No Space Left On Device

```{r}

Commands<- data.table(history = readLines(here("raw-data/07-input.txt")))

cd <- function(previos_dir, new_dir){
  
  if(is.na(new_dir)){
    return(previos_dir)
  }
  
  if(new_dir != ".."){
    return(c(previos_dir, 
             paste0(tail(previos_dir,1),"/",new_dir)))
  }
  
  head(previos_dir, -1)
  
}

DirSizes <-
  copy(Commands)[,`:=`(current_dir = str_match(history,"^\\$ cd (.*)")[,2],
                       size = str_match(history,"^\\d+") |> as.integer())
  ][, all_dirs := Reduce(cd, current_dir, accumulate = TRUE)
  ][history %like% "^\\d",
    .(all_dirs = all_dirs[[1]]),
    by = c("history", "size")
  ][, .(size = sum(size)),
    by = "all_dirs"]


```


## Part 1

```{r}

DirSizes[size < 100000,
         sum(size)]

```


## Part 2

```{r}

DirSizes[size > 30000000 - (70000000 - DirSizes[all_dirs == "/", size]),
         min(size)]

```

# Day 8:???
## Part 1
## Part 2

# Day 9:???
## Part 1
## Part 2

# Day 10:???
## Part 1
## Part 2

# Day 11:???
## Part 1
## Part 2

# Day 12:???
## Part 1
## Part 2

# Day 13:???
## Part 1
## Part 2

# Day 14:???
## Part 1
## Part 2
 
# Day 15:???
## Part 1
## Part 2

# Day 16:???
## Part 1
## Part 2

# Day 17:???
## Part 1
## Part 2

# Day 18:???
## Part 1
## Part 2

# Day 19:???
## Part 1
## Part 2

# Day 20:???
## Part 1
## Part 2

# Day 21:???
## Part 1
## Part 2

# Day 22:???
## Part 1
## Part 2

# Day 23:???
## Part 1
## Part 2

# Day 24:???
## Part 1
## Part 2

# Day 25:???
## Part 1
## Part 2



:::
